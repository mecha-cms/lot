---
title: YAML Parser
description: YAML-like string parser.
...

To store array in [YAML](http://www.yaml.org "YAML Ain’t Markup Language (YAML™)") format or to convert YAML-like data format into array is possible with Mecha but it is limited only to `key: value`-based syntax to mimic array keys and their values. This means that you can’t parse external YAML files anyway with Mecha’s internal string parser, but the YAML-like data generated by `To::YAML()` method basically can be treated as a valid YAML data in most cases.

### Converter

#### String to Array

~~~ .php
$test = From::YAML('foo: bar');
~~~

[connect:../reference/class/from/-y-a-m-l]

#### Array to String

~~~ .php
$test = To::YAML(['foo' => 'bar']);
~~~

[connect:../reference/class/to/-y-a-m-l]

### Syntax

#### Key and Value

~~~ .yaml
foo: bar
baz: qux
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
foo: bar
baz: qux
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Empty Value

~~~ .yaml
foo:
bar: ''
baz: ""
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
foo:
bar: ''
baz: ""
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Empty Data

~~~ .yaml

~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(""), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Comments

~~~ .yaml
# comment
test_1: foo
test_2: foo # comment
test_3: 'foo # comment' # comment
test_4: "foo # comment" # comment
test_5: # comment 'foo'
test_6: # comment "foo"
'test_7 #comment': foo
test_8: #comment
  foo: bar
'test_9 #comment':
  foo: bar
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
# comment
test_1: foo
test_2: foo # comment
test_3: 'foo # comment' # comment
test_4: "foo # comment" # comment
test_5: # comment 'foo'
test_6: # comment "foo"
'test_7 #comment': foo
test_8: #comment
  foo: bar
'test_9 #comment':
  foo: bar
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Sequence

Arrays with numeric keys.

##### Manual

~~~ .yaml
0: a
1: b
2: c
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
0: a
1: b
2: c
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

##### Automatic

~~~ .yaml
- a
- b
- c
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
- a
- b
- c
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Compact Array

~~~ .yaml
foo: [bar, baz, 0, true]
bar: {baz: qux, 0: true}
baz: [true, 'true', "true", 0, '0', "0"]
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
foo: [bar, baz, 0, true]
bar: {baz: qux, 0: true}
baz: [true, 'true', "true", 0, '0', "0"]
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Data Type

All data types will be converted automatically by the [link:../reference/function/e] function.

~~~ .yaml
string: a
integer: 1
float: 1.5
boolean: true
null: null
"YAML's null": ~
JSON: {"foo":"bar","baz":"qux","string_integer":"1","string_boolean":"false"}
string_integer: "1"
string_float: "1.5"
string_boolean: "true"
string_null: "null"
single_quote: 'foo\nbar'
double_quote: "foo\nbar"
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
string: a
integer: 1
float: 1.5
boolean: true
null: null
"YAML's null": ~
JSON: {"foo":"bar","baz":"qux","string_integer":"1","string_boolean":"false"}
string_integer: "1"
string_float: "1.5"
string_boolean: "true"
string_null: "null"
single_quote: 'foo\\nbar'
double_quote: "foo\\nbar"
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Nesting

~~~ .yaml
a: b
c: d
e:
  f: g
  h: i
j: k
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
a: b
c: d
e:
  f: g
  h: i
j: k
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Escaping

**Example:**

~~~ .yaml
foo: bar: baz
~~~

~~~ .yaml
foo: 'bar: baz'
~~~

~~~ .yaml
'foo: bar': baz
~~~

**Result:**

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
foo: bar: baz
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
foo: 'bar: baz'
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

~~~ .json
[[e]]echo str_replace("    ", "  ", json_encode(From::YAML(<<<YAML
'foo: bar': baz
YAML
), JSON_PRETTY_PRINT));[[/e]]
~~~

#### Block

**Example:**

~~~ .yaml
folded-block-style: >
  aaaaa bbbbb
  ccccc ddddd eeeee
    f g h
  iiiii jjjjj

  kkkkk

  lllll mmmmm nnnnn
~~~

~~~ .yaml
literal-block-style: |
  aaaaa bbbbb
  ccccc ddddd eeeee
    f g h
  iiiii jjjjj

  kkkkk

  lllll mmmmm nnnnn
~~~

**Result:**

~~~ .txt
[[e]]echo From::YAML(<<<YAML
folded-block-style: >
  aaaaa bbbbb
  ccccc ddddd eeeee
    f g h
  iiiii jjjjj

  kkkkk

  lllll mmmmm nnnnn
YAML
)['folded-block-style'];[[/e]]
~~~

~~~ .txt
[[e]]echo From::YAML(<<<YAML
literal-block-style: |
  aaaaa bbbbb
  ccccc ddddd eeeee
    f g h
  iiiii jjjjj

  kkkkk

  lllll mmmmm nnnnn
YAML
)['literal-block-style'];[[/e]]
~~~
