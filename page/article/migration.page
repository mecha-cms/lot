---
title: Migration Guide
description: Migrating from version `1.x.x` to version `2.x.x`.
...

This page describes about how to make your old pages becomes readable by the second generation of **Mecha**. On this page, you will see some comparisons between **Mecha** version `1.x.x` with **Mecha** version `2.x.x` —in the hope that you can make some adjustments based on their similarities.

### Page Headers

#### Version `1.x.x`

~~~ .no-highlight
Title: Page Title
Description: "Page description."
Author: Taufik Nurrohman
Content Type: Markdown
Fields: {"foo":"bar","baz":1}

====
~~~

#### Version `2.x.x`

~~~ .yaml
---
title: Page Title
description: Page description.
author: Taufik Nurrohman
type: Markdown
...
~~~

In version `2.x.x`, you can create custom fields as separate files named as the field key with extension `.data`, stored in a folder with the same name as the page name, without the file extension ([the page state][link:../reference/extension/page]). Here, custom fields value will becomes the file content:

~~~ .no-highlight
lot\
 └── page\
     ├── page-slug\
     │   ├── foo.data ← contains `bar`
     │   └── bar.data ← contains `1`
     └── page-slug.page
~~~

### Custom Fields

As described in the previous section, this is the difference between version `1.x.x` and `2.x.x` in calling the custom field data:

#### Version `1.x.x`

~~~ .php
echo $page->fields->foo;
echo $page->fields->bar;
~~~

#### Version `2.x.x`

~~~ .php
echo $page->foo;
echo $page->bar;
~~~

> **Info:** You can revert to the old behavior of **Mecha** by storing the custom fields data as JSON and save it to a file named as `fields.data` instead:
>
> ~~~ .no-highlight
> lot\
>  └── page\
>      ├── page-slug\
>      │   └── fields.data
>      └── page-slug.page
> ~~~
>
> Contents of `fields.data`:
>
> ~~~ .json
> {"foo":"bar","baz":1}
> ~~~
>
> To call the custom fields:
>
> ~~~ .php
> echo $page->fields->foo;
> echo $page->fields->bar;
> ~~~

### Custom CSS and JavaScript

#### Version `1.x.x`

~~~ .no-highlight
<style>
body {
  background-color: #ffa;
  color: #000;
}
</style>

====

<script>
(function() {
  window.addEventListener("load", function() {
    console.log('Loaded!');
  }, false);
})();
</script>
~~~

#### Version `2.x.x`

Split your custom CSS and JavaScript data by `====` so that you will have two parts of the fields:

 - `css.data`

   ~~~ .html
   <style>
   body {
     background-color: #ffa;
     color: #000;
   }
   </style>
   ~~~

 - `js.data`

   ~~~ .html
   <script>
   (function() {
     window.addEventListener("load", function() {
       console.log('Loaded!');
     }, false);
   })();
   </script>
   ~~~

Store them in folder that has relationship with the page:

~~~ .no-highlight
lot\
 └── page\
     ├── page-slug\
     │   ├── css.data ← contains the first part
     │   └── js.data ← contains the second part
     └── page-slug.page
~~~

### Time and Tags

#### Version `1.x.x`

Prior to version `2.x.x`, time and tags data are stored in the file name, following the slug data:

~~~ .no-highlight
2017-01-02-12-33-03_1,2,3,11_page-slug.txt
~~~

#### Version `2.x.x`

In this version, time and tags data are removed from the file name. However, the `time` data will remain attached to the page object with a value that is automatically created based on the current file modification time when you don’t set it explicitly. To set a hard–coded `time` data, you need to add `time` property to the page headers. This also applies to `kind` (tags data):

~~~ .yaml
---
title: Page Title
description: Page description.
author: Taufik Nurrohman
type: Markdown
time: 2017-01-02 12:33:03
kind: [1,2,3,11]
...
~~~

> **Note:** It is highly recommended to set the `time` and `kind` data in a separated field files because those fields data are commonly used to sort the pages. Reading embedded fields value in the page file is fairly slow, therefore, **Mecha** sets a higher priority on reading the separated fields data instead of the embedded fields data. In the case of [reading page property individually][link:../reference/class/page#reference:get], **Mecha** will first seek for a separated field file from the page. When the desired field can be found, **Mecha** will only read that field and then cancel the process of reading the entire content of that page file:
>
> ~~~ .no-highlight
> lot\
>  └── page\
>      ├── page-slug\
>      │   ├── kind.data
>      │   └── time.data
>      └── page-slug.page
> ~~~
>
> > **Info:** The default [shield][link:shield] uses `slug` to set the `$key` value in the `sort()` method of [`Anemon` class][link:../reference/class/anemon#reference:order], and they are sorted ascending. To sort the page listing descending by time, go to `lot\shield\document\state\config.php` then replace the `sort` value like this:
> >
> > ~~~ .php
> > return [
> >     // sort descending by the `time` field
> >     'sort' => [-1, 'time']
> > ];
> > ~~~

_To be continued…_