---
title: Class `Config`
description: Configuration getter and setter.
...

### Set

~~~ .xmp.php
Config::set($key, $value = null);
~~~

Set an item:

~~~ .php
Config::set('test', '#ok');
~~~

Then, you can call the value of `test` in the page after the declaration above this way:

~~~ .php
echo Config::get('test'); // â†’ `#ok`
~~~

Or you could also set multiple variables with the help of array:

~~~ .php
Config::set([
    'foo' => 'bar',
    'baz' => 'qux'
]);
~~~

Or with dot notation:

~~~ .php
Config::set('author.name', '#test');
~~~

There is also a shortcut variable called `$config` which also able to do the same:

~~~ .php
$config->test = '#ok';
~~~

### Get

~~~ .xmp.php
Config::get($key = null, $fail = false);
~~~

Get item by key:

~~~ .php
echo Config::get('title');
~~~

With dot notation:

~~~ .php
echo Config::get('author.name');
~~~

This will return the value of `foo` if available, otherwise, return `false`:

~~~ .php
echo Config::get('foo', false);
~~~

Get multiple data at once:

~~~ .php
$data = Config::get([
    'title' => false,
    'description' => false,
    'author' => false
]);
~~~

Get all items:

~~~ .php
__test__(Config::get());
~~~

### Reset

~~~ .xmp.php
Config::reset($key = null);
~~~

Remove item by key:

~~~ .php
Config::reset('title');
~~~

With dot notation:

~~~ .php
Config::reset('author.name');
~~~

Remove multiple item at once:

~~~ .php
Config::reset(['title', 'description', 'author']);
~~~

Remove all items:

~~~ .php
Config::reset();
~~~