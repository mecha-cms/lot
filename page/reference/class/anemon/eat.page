---
title: `$anemon::eat()`
description: Array walker.
...

Start with eating…

~~~ .php
$array = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3
];

Anemon::eat($array); // …
~~~

### Vomit

Output specific array data.

~~~ .php.xmp
->vomit($key = null, $fail = false);
~~~

**Example:**

~~~ .php
$test_1 = Anemon::eat($array)->vomit();
$test_2 = Anemon::eat($array)->vomit('bar', '#');
$test_3 = Anemon::eat($array)->vomit('wow', '#');
~~~

Result:

~~~ .php
$test_1 = $array;
~~~

~~~ .php
$test_2 = 1;
~~~

~~~ .php
$test_3 = '#';
~~~

### Is

Reduce array data to those that pass the function’s test.

~~~ .php.xmp
->is($fn ($value, $key));
~~~

**Example:**

~~~ .php
$test = Anemon::eat($array)->is(function($value, $key) {
    return $value < 2;
})->vomit();
~~~

Result:

~~~ .php
$test = [
    'foo' => 0,
    'bar' => 1
];
~~~

### Not

Reduce array data to those that does not pass the function’s test.

~~~ .php.xmp
->not($fn ($value, $key));
~~~

**Example:**

~~~ .php
$test = Anemon::eat($array)->not(function($value, $key) {
    return $value < 2;
})->vomit();
~~~

Result:

~~~ .php
$test = [
    'baz' => 2,
    'qux' => 3
];
~~~

### Shake

Shuffle array values.

~~~ .php.xmp
->shake($preserve_key = true);
~~~

**Example:**

~~~ .php
$test_1 = Anemon::eat($array)->shake()->vomit();
$test_2 = Anemon::eat($array)->shake(false)->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    'qux' => 3,
    'foo' => 0,
    'bar' => 1,
    'baz' => 2
];

$test_2 = [
    0 => 3,
    1 => 0,
    2 => 1,
    3 => 2
];
~~~

### Sort

Sort array values.

~~~ .php.xmp
->sort($sort = 1, $preserve_key = false);
~~~

**Example:**

~~~ .php
$array = [
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'bar' => [
        'id' => 4
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];


//  1: ASC
// -1: DESC

// basic
$test_1 = Anemon::eat($array)->sort(1)->vomit();

// sort by value of the `color` property
$test_2 = Anemon::eat($array)->sort([1, 'color'])->vomit();

// preserve original array key
$test_3 = Anemon::eat($array)->sort([-1, 'color'], true)->vomit();

// set default value of array item with missing `color` property as `#black`
$test_4 = Anemon::eat($array)->sort([-1, 'color'], '#black')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    0 => [
        'id' => 4
    ],
    1 => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    2 => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    3 => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];

$test_2 = [
    0 => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    1 => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    2 => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];

$test_3 = [
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ],
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ]
];

$test_4 = [
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ],
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    'bar' => [
        'id' => 4,
        'color' => '#black'
    ]
];
~~~

### Chunk

Chunk an array.

~~~ .php.xmp
->chunk($chunk = 5, $index = null, $fail = []);
~~~

**Example:**

~~~ .php
$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

$test_1 = Anemon::eat($array)->chunk(4);
$test_2 = Anemon::eat($array)->chunk(4, 2);
$test_3 = Anemon::eat($array)->chunk(4, 11, false);
~~~

Result:

~~~ .php
$test_1 = [
    [0, 1, 2, 3],
    [4, 5, 6, 7],
    [8, 9]
];

$test_2 = [8, 9];

$test_3 = false;
~~~