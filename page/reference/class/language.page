---
title: Class `Language`
description: Internationalization.
...

### Constructor

~~~ .xmp.php
Language($input = []);
~~~

**Example:**

Get language files from the `lot\language` folder then convert it into object:

~~~ .php
$language = new Language;
~~~

#### Set

Set new language property:

~~~ .php
$language->foo = 'bar';
~~~

~~~ .php
Language::set('foo', 'bar');
~~~

#### Get

Get language property:

~~~ .php
echo $language->foo;
~~~

~~~ .php
echo Language::get('foo');
~~~

### Static Call

~~~ .xmp.php
Language::{$property}($vars = [], $preserve_case = false);
~~~

Get language property statically:

~~~ .php
echo Language::home();
~~~

Get language property dynamically:

~~~ .php
echo $language->home;
~~~

~~~ .php
echo $language->home();
~~~

### String Variable

Letâ€™s say we have a language property called `test` like this:

~~~ .yaml
test: Hello %{place}%! My name is %{object}%.
~~~

Then:

~~~ .php
echo Language::test([
    'place' => 'world',
    'object' => 'Mocha'
]);
~~~

The code above will return the `test` value into this:

~~~ .txt
Hello world! My name is Mocha.
~~~