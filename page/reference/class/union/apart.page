---
title: `$union::apart()`
description: Convert string markup into input data.
...

This is the inverse version of [`Union::unite()`][link:unite].

~~~ .php.xmp
Union::apart($input, $eval = true);
~~~

**Example:**

~~~ .php
__test__(
    Union::apart('<a></a>'),
    Union::apart('<a>test content</a>'),
    Union::apart('<a href="/">test content</a>'),
    Union::apart('<input>'),
    Union::apart('<input type="text">'),
    Union::apart('<input type="text" disabled readonly="">'),
    Union::apart('<foo a="1" b=".5" c="true" d="null" e="abc" f="{
        &quot;foo&quot;: &quot;bar&quot;,
        &quot;baz&quot;: &quot;1&quot;
    }">'),
    Union::apart('<foo a="1" b=".5" c="true">', false),
    Union::apart('#')
);
~~~

Result:

~~~ .php
[
    0 => 'a',
    1 => "",
    2 => []
]
~~~

~~~ .php
[
    0 => 'a',
    1 => 'test content',
    2 => []
]
~~~

~~~ .php
[
    0 => 'a',
    1 => 'test content',
    2 => [
        'href' => '/'
    ]
]
~~~

~~~ .php
[
    0 => 'input',
    1 => false,
    2 => []
]
~~~

~~~ .php
[
    0 => 'input',
    1 => false,
    2 => [
        'type' => 'text'
    ]
]
~~~

~~~ .php
[
    0 => 'input',
    1 => false,
    2 => [
        'type' => 'text',
        'disabled' => 'disabled',
        'readonly' => ""
    ]
]
~~~

~~~ .php
[
    0 => 'foo',
    1 => false,
    2 => [
        'a' => 1,
        'b' => .5,
        'c' => true,
        'd' => null,
        'e' => 'abc',
        'f' => stdClass::__set_state([
            'foo' => 'bar',
            'baz' => '1'
        ])
    ]
]
~~~

~~~ .php
[
    0 => 'foo',
    1 => false,
    2 => [
        'a' => '1',
        'b' => '.5',
        'c' => 'true'
    ]
]
~~~

~~~ .php
false
~~~