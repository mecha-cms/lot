---
title: Class `Genome`
description: Prototypes.
...

This class is purposed to be used as an extension to other classes so that the extended classes will be able to create their own dynamic methods. This is an abstract class, so you have to extend this class with another class:

~~~ .php
class Blastula extends Genome {
    public static function test() {} // native method
}
~~~

### Plug

Add a method.

~~~ .xmp.php
Genome::plug($kin, $fn);
~~~

**Example:**

Add a `birth` method to the `Blastula` class:

~~~ .php
Blastula::plug('birth', function($name) {
    return 'Hello world! My name is ' . $name . '.';
});
~~~

Usage:

~~~ .php
echo Blastula::birth('Mocha'); // → `Hello world! My name is Mocha.`
~~~

In object context:

~~~ .php
class Foo extends Genome {
    public $x = 0;
    public function bar($i) {
        $this->x += $i;
        return $this;
    }
}

Foo::plug('baz', function($i) {
    $this->x += $i;
    return $this;
});
~~~

Usage:

~~~ .php
$foo = new Foo;
echo $foo->bar(4)->baz(1)->bar(2)->x;
~~~

### Eject

Remove a method.

~~~ .xmp.php
Genome::eject($kin);
~~~

**Example:**

Remove `birth` method from the `Blastula` class:

~~~ .php
Blastula::eject('birth');
~~~

Remove all custom methods from the `Blastula` class:

~~~ .php
Blastula::eject();
~~~

### Kin

Get the available methods.

~~~ .xmp.php
Genome::kin($kin = null, $fail = false, $origin = false);
~~~

**Example:**

~~~ .php
$test_1 = Blastula::kin();
$test_2 = Blastula::kin('birth');
$test_3 = Blastula::kin('test');
$test_4 = Blastula::kin('test', false, true); // also, search for native method(s)
~~~

Result:

~~~ .php
$test_1 = [
    'birth' => function($name) { … }
];

$test_2 = function($name) { … };

$test_3 = false;

$test_4 = 1;
~~~