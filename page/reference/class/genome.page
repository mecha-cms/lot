---
title: `Genome`
description: Class extension.
...

This class is purposed to be used as an extension to other classes so that the extended classes will be able to create their own dynamic methods. This is an abstract class, so you have to extend this class with another class:

~~~ .php
class Blastula extends Genome {
    public static function test() {} // native method
}
~~~

### Plug

Add a method.

~~~ .php.xmp
Genome::_($kin, $fn);
~~~

**Example:**

Add a `birth` method to the `Blastula` class:

~~~ .php
Blastula::_('birth', function($name = 'Mecha') {
    return 'Hello world! My name is ' . $name . '.';
});
~~~

Usage:

~~~ .php
echo Blastula::birth(); // → `Hello world! My name is Mecha.`
echo Blastula::birth('Mocha'); // → `Hello world! My name is Mocha.`
~~~

In object context:

~~~ .php
class Foo extends Genome {
    public $x = 0;
    public function bar($i) {
        $this->x += $i;
        return $this;
    }
}

Foo::_('baz', function($i) {
    $this->x += $i;
    return $this;
});
~~~

Usage:

~~~ .php
$foo = new Foo;
echo $foo->bar(4)->baz(1)->bar(2)->x;
~~~

Same function, different default arguments:

~~~ .php
function fn_birth($name = 'Mecha', $entity = 'world') {
    return 'Hello ' . $entity . '! My name is ' . $name . '.';
}

Blastula::_('birth_1', 'fn_birth');
Blastula::_('birth_2', ['fn_birth', ['Mocha']]);
Blastula::_('birth_3', ['fn_birth', ['Mocha'], 1]);
~~~

Usage:

~~~ .php
/* Using the default method. */
echo Blastula::birth_1(); // `Hello world! My name is Mecha.`
echo Blastula::birth_1('Mocha'); // `Hello world! My name is Mocha.`
echo Blastula::birth_1('Mocha', 'space'); // `Hello space! My name is Mocha.`

/* Alter the first default argument value to `Mocha`. */
echo Blastula::birth_2(); // `Hello world! My name is Mocha.`
echo Blastula::birth_2('Machi'); // `Hello world! My name is Machi.`
echo Blastula::birth_2('Machi', 'space'); // `Hello space! My name is Machi.`

/* Alter the first default argument value to `Mocha`. */
/* Limit arguments to `1` (changing the `$entity` parameter won’t give any effect here). */
echo Blastula::birth_3(); // `Hello world! My name is Mocha.`
echo Blastula::birth_3('Machi'); // `Hello world! My name is Machi.`
echo Blastula::birth_3('Machi', 'space'); // `Hello world! My name is Machi.`
~~~

### Kin

Get the available methods.

~~~ .php.xmp
Genome::_($kin);
~~~

**Example:**

~~~ .php
$test_1 = Blastula::_();
$test_2 = Blastula::_('birth');
$test_3 = Blastula::_('test'); // check for native method?
~~~

Result:

~~~ .php
$test_1 = [
    'birth' => [function($name = 'Mecha') { … }]
];

$test_2 = [function($name = 'Mecha') { … }];

$test_3 = false;
~~~

### Eject

Remove a method.

~~~ .php.xmp
Genome::_($kin, null);
~~~

**Example:**

Remove `birth` method from the `Blastula` class:

~~~ .php
Blastula::_('birth', null);
~~~