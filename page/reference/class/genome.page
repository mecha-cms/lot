---
title: Class `Genome`
description: Make classes becomes pluggable.
...

This is an abstract class, so you have to extend this class with another class:

~~~ .php
class Blastula extends Genome {

    public static function test() {} // native method

}
~~~

### Plug

~~~ .xmp.php
Genome::plug($kin, $fn);
~~~

Add a `birth` method to the `Blastula` class:

~~~ .php
Blastula::plug('birth', function($name) {
    return 'Hello world! My name is ' . $name . '.';
});
~~~

Usage:

~~~ .php
echo Blastula::birth('Mocha'); // → `Hello world! My name is Mocha.`
~~~

### Unplug

~~~ .xmp.php
Genome::unplug($kin);
~~~

Remove `birth` method from the `Blastula` class:

~~~ .php
Blastula::unplug('birth');
~~~

Remove all custom methods from the `Blastula` class:

~~~ .php
Blastula::unplug();
~~~

### Kin

~~~ .xmp.php
Genome::kin($kin = null, $fail = false, $origin = false);
~~~

Get the available methods:

~~~ .php
$test_1 = Blastula::kin();
$test_2 = Blastula::kin('birth');
$test_3 = Blastula::kin('test');
$test_4 = Blastula::kin('test', false, true); // also, search for native method(s)
~~~

Result:

~~~ .php
$test_1 = [
    'birth__' => function($name) { … }
];
~~~

~~~ .php
$test_2 = function($name) { … };
~~~

~~~ .php
$test_3 = false;
~~~

~~~ .php
$test_4 = 1;
~~~

### Instance Counter

Try to use `Blastula::_()` instead of `new Blastula()` to create a class instance. This method will trigger the `new` operator to the `Blastula` class and will also store the class instance to the internal storage of the `Genome` class:

~~~ .php
$test = Blastula::_();
~~~

To count the instance of `Blastula`:

~~~ .php
__test__(Blastula::__instance__());
~~~

[connect:../../article/instance-counter]