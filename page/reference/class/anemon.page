---
title: Class `Anemon`
description: Array workers.
...

### Step

~~~ .xmp.php
Anemon::step($input, $NS = null);
~~~

Create list of _namespace_ steps from a string:

~~~ .php
$test = Anemon::step('foo.bar.baz'); // ← default `$NS` is `.`
~~~

Result:

~~~ .php
$test = [
    'foo.bar.baz',
    'foo.bar',
    'foo'
];
~~~

### Edge

~~~ .xmp.php
Anemon::edge($input, $min = null, $max = null);
~~~

Prevent input value exceeds the minimum and maximum value:

~~~ .php

$min = 0;
$max = 100;

__test__(
    Anemon::edge(4, $min, $max),
    Anemon::edge(-4, $min, $max)
    Anemon::edge(104, $min, $max)
);
~~~

Result:

~~~ .php
4
~~~

~~~ .php
0
~~~

~~~ .php
100
~~~

### Set

~~~ .xmp.php
Anemon::set(&$input, $key, $value = null);
~~~

Set or replace array value recursively:

~~~ .php
$array = [
    'foo' => 1,
    'bar' => [
        'baz' => 2,
        'qux' => 3
    ]
];

Anemon::set($array, 'bar.baz', '#');
~~~

Result:

~~~ .php
$array = [
    'foo' => 1,
    'bar' => [
        'baz' => '#',
        'qux' => 3
    ]
];
~~~

### Get

~~~ .xmp.php
Anemon::get(&$input, $key = null, $fail = false);
~~~

Get array value recursively:

~~~ .php
$array = [
    'foo' => 1,
    'bar' => [
        'baz' => 2,
        'qux' => 3
    ]
];

$test_1 = Anemon::get($array, 'bar.baz', '#');
$test_2 = Anemon::get($array, 'bar.foo', '#');
~~~

Result:

~~~ .php
$test_1 = 2;
~~~

~~~ .php
$test_2 = '#';
~~~

### Reset

~~~ .xmp.php
Anemon::reset(&$input, $key);
~~~

Remove array value recursively:

~~~ .php
$array = [
    'foo' => 1,
    'bar' => [
        'baz' => 2,
        'qux' => 3
    ]
];

Anemon::reset($array, 'bar.baz');
~~~

Result:

~~~ .php
$array = [
    'foo' => 1,
    'bar' => [
        'qux' => 3
    ]
];
~~~

### Extend and Concat

~~~ .xmp.php
Anemon::extend(&$input, $a[, $b[, $c[, ...]]]);
~~~

~~~ .xmp.php
Anemon::concat(&$input, $a[, $b[, $c[, ...]]]);
~~~

Extend arrays:

~~~ .php
$a = [
    'foo' => 1,
    'bar' => [
        'baz' => 2,
        'qux' => 3
    ]
];

$b = [
    'foo' => 1,
    'bar' => [
        'baz' => '#'
    ],
    'qux' => '#'
];

$test = Anemon::extend($a, $b);
~~~

Result:

~~~ .php
$test = [
    'foo' => 1,
    'bar' => [
        'baz' => '#',
        'qux' => 3
    ],
    'qux' => '#'
];
~~~

~~~ .php
$a = [
    'foo' => 1,
    'bar' => [
        'baz' => '#',
        'qux' => 3
    ],
    'qux' => '#'
];
~~~

Concatenate arrays:

~~~ .php
$a = [
    0 => 'a',
    1 => 'b',
    2 => 'c'
];

$b = [
    0 => 'd',
    1 => 'e',
    2 => 'f'
];

$test = Anemon::concat($a, $b);
~~~

Result:

~~~ .php
$test = [
    0 => 'a',
    1 => 'b',
    2 => 'c',
    3 => 'd',
    4 => 'e',
    5 => 'f'
];
~~~

~~~ .php
$a = [
    0 => 'a',
    1 => 'b',
    2 => 'c',
    3 => 'd',
    4 => 'e',
    5 => 'f'
];
~~~

With `Anemon::extend()`, the result is different:

~~~ .php
$a = [
    0 => 'a',
    1 => 'b',
    2 => 'c'
];

$b = [
    0 => 'd',
    1 => 'e',
    2 => 'f'
];

$test = Anemon::extend($a, $b);
~~~

Result:

~~~ .php
$test = [
    0 => 'd',
    1 => 'e',
    2 => 'f'
];
~~~

~~~ .php
$a = [
    0 => 'd',
    1 => 'e',
    2 => 'f'
];
~~~

### Eat

Array manipulation. Starts with eating or walking…

~~~ .php
$array = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3
];

Anemon::eat($array); // …
~~~

#### Vomit

~~~ .xmp.php
->vomit($key = null, $fail = false);
~~~

Output specific data:

~~~ .php
$test_1 = Anemon::eat($array)->vomit();
$test_2 = Anemon::eat($array)->vomit('bar', '#');
$test_3 = Anemon::eat($array)->vomit('wow', '#');
~~~

Result:

~~~ .php
$test_1 = $array;
~~~

~~~ .php
$test_2 = 1;
~~~

~~~ .php
$test_3 = '#';
~~~

#### Is

~~~ .xmp.php
->is($fn ($value, $key));
~~~

Reduce array data to those that pass the function’s test:

~~~ .php
$test = Anemon::eat($array)->is(function($value, $key) {
    return $value < 2;
})->vomit();
~~~

Result:

~~~ .php
$test = [
    'foo' => 0,
    'bar' => 1
];
~~~

#### Not

~~~ .xmp.php
->not($fn ($value, $key));
~~~

Reduce array data to those that does not pass the function’s test:

~~~ .php
$test = Anemon::eat($array)->not(function($value, $key) {
    return $value < 2;
})->vomit();
~~~

Result:

~~~ .php
$test = [
    'baz' => 2,
    'qux' => 3
];
~~~

#### Shake

~~~ .xmp.php
->shake($preserve_key = true);
~~~

Shuffle array values:

~~~ .php
$test_1 = Anemon::eat($array)->shake()->vomit();
$test_2 = Anemon::eat($array)->shake(false)->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    'qux' => 3,
    'foo' => 0,
    'bar' => 1,
    'baz' => 2
];
~~~

~~~ .php
$test_2 = [
    0 => 3,
    1 => 0,
    2 => 1,
    3 => 2
];
~~~

#### Sort

~~~ .php
->sort($order = 1, $key = null, $preserve_key = false, $null = X);
~~~

Sort array values:

~~~ .php
$array = [
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'bar' => [
        'id' => 4
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];


//  `1`: ASC
// `-1`: DESC

// basic
$test_1 = Anemon::eat($array)->sort(1)->vomit();

// sort by value of the `color` property
$test_2 = Anemon::eat($array)->sort(1, 'color')->vomit();

// preserve original array key
$test_3 = Anemon::eat($array)->sort(-1, 'color', true)->vomit();

// set default value of array item with missing `color` property as `#black`
$test_4 = Anemon::eat($array)->sort(-1, 'color', true, '#black')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    0 => [
        'id' => 4
    ],
    1 => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    2 => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    3 => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];
~~~

~~~ .php
$test_2 = [
    0 => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    1 => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    2 => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ]
];
~~~

~~~ .php
$test_3 = [
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ],
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ]
];
~~~

~~~ .php
$test_4 = [
    'qux' => [
        'size' => 'small',
        'color' => 'red',
        'id' => 1
    ],
    'foo' => [
        'size' => 'medium',
        'color' => 'green',
        'id' => 2
    ],
    'baz' => [
        'size' => 'large',
        'color' => 'blue',
        'id' => 3
    ],
    'bar' => [
        'id' => 4,
        'color' => '#black'
    ]
];
~~~

#### Chunk

~~~ .xmp.php
->chunk($chunk = 5, $index = null, $fail = []);
~~~

Chunk an array:

~~~ .php
$array = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

$test_1 = Anemon::eat($array)->chunk(4);
$test_2 = Anemon::eat($array)->chunk(4, 2);
$test_3 = Anemon::eat($array)->chunk(4, 11, false);
~~~

Result:

~~~ .php
$test_1 = [
    [0, 1, 2, 3],
    [4, 5, 6, 7],
    [8, 9]
];

$test_2 = [8, 9];

$test_3 = false;
~~~

### Walk

~~~ .php
$array = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3
];

Anemon::walk($array); // …
~~~

#### Next

~~~ .xmp.php
->next($skip = 0);
~~~

Move to next item:

~~~ .php
Anemon::walk($array)->next()->current();
Anemon::walk($array)->next(1)->current(); // skip 1 item
~~~

#### Previous

~~~ .xmp.php
->previous($skip = 0);
~~~

Move to previous item:

~~~ .php
Anemon::walk($array)->previous()->current();
Anemon::walk($array)->previous(1)->current(); // skip 1 item
~~~

#### To

~~~ .xmp.php
->to($index);
~~~

Move to the 2<sup>nd</sup> item:

~~~ .php
Anemon::walk($array)->to(1)->current();
~~~

#### Before

~~~ .xmp.php
->before($value, $key = null);
~~~

Insert before:

~~~ .php
$test_1 = Anemon::walk($array)->to(2)->before('#')->vomit();
$test_2 = Anemon::walk($array)->to(2)->before('#', '#key')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    'foo' => 0,
    'bar' => 1,
    2 => '#',
    'baz' => 2,
    'qux' => 3
];
~~~

~~~ .php
$test_2 = [
    'foo' => 0,
    'bar' => 1,
    '#key' => '#',
    'baz' => 2,
    'qux' => 3
];
~~~

#### After

~~~ .xmp.php
->after($value, $key = null);
~~~

Insert after:

~~~ .php
$test_1 = Anemon::walk($array)->to(2)->after('#')->vomit();
$test_2 = Anemon::walk($array)->to(2)->after('#', '#key')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    3 => '#',
    'qux' => 3
];
~~~

~~~ .php
$test_2 = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    '#key' => '#',
    'qux' => 3
];
~~~

#### Append

~~~ .xmp.php
->append($value, $key = null);
~~~

Append an array item:

~~~ .php
$test_1 = Anemon::walk($array)->append('#')->vomit();
$test_2 = Anemon::walk($array)->append('#', '#key')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    0 => '#',
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3
];
~~~

~~~ .php
$test_2 = [
    '#key' => '#',
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3
];
~~~

#### Prepend

~~~ .xmp.php
->prepend($value, $key = null);
~~~

Prepend an array item:

~~~ .php
$test_1 = Anemon::walk($array)->prepend('#')->vomit();
$test_2 = Anemon::walk($array)->prepend('#', '#key')->vomit();
~~~

Result:

~~~ .php
$test_1 = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3,
    4 => '#'
];
~~~

~~~ .php
$test_2 = [
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    'qux' => 3,
    '#key' => '#'
];
~~~

#### First

~~~ .xmp.php
->first();
~~~

Get the first item:

~~~ .php
$test = Anemon::walk($array)->first();
~~~

#### Last

~~~ .xmp.php
->last();
~~~

Get the last item:

~~~ .php
$test = Anemon::walk($array)->last();
~~~

#### Count

~~~ .xmp.php
->count($deep = false);
~~~

Count items:

~~~ .php
$test = Anemon::walk($array)->count();
~~~

#### Key

~~~ .xmp.php
->key($index, $fail = false);
~~~

Get array key by index:

~~~ .php
$test = Anemon::walk($array)->key(1);
~~~

#### Index

~~~ .xmp.php
->index($key, $fail = false);
~~~

Get array index by key:

~~~ .php
$test = Anemon::walk($array)->index('foo');
~~~

### Alter

~~~ .xmp.php
Anemon::alter($input, $replace = [], $fail = null);
~~~

This is just a shortcut for `switch` and `case` statements:

~~~ .php
$input = 'bar';

$test = Anemon::alter($input, [
    'foo' => 1,
    'bar' => 2,
    'baz' => 3
]);
~~~

Result:

~~~ .php
$test = 2;
~~~

---

### Constructor

~~~ .xmp.php
Anemon($array = [], $separator = ', ');
~~~

Create flexible array variable. An instance of `Anemon` class can be used to make the array becomes possible to be accessed as string, object or function:

~~~ .php
$test = new Anemon(['foo', 'bar', 'baz']);

echo $test;
echo $test(' + ');
echo $test->join(' + ');
echo $test->{1};
echo $test->vomit(1);
~~~

Result:

~~~ .php
foo, bar, baz
~~~

~~~ .php
foo + bar + baz
~~~

~~~ .php
foo + bar + baz
~~~

~~~ .php
bar
~~~

~~~ .php
bar
~~~

Array keys prefixed by a `__` will be ignored by default:

~~~ .php
$test = new Anemon([
    'foo' => 0,
    'bar' => 1,
    'baz' => 2,
    '__hidden' => '#'
], ', ');

echo $test;
echo $test(' + ');
echo $test->join(' + ');
echo $test->foo;
echo $test->__hidden;
echo $test->vomit('foo');
~~~

Result:

~~~ .php
0, 1, 2
~~~

~~~ .php
0 + 1 + 2
~~~

~~~ .php
0 + 1 + 2
~~~

~~~ .php
0
~~~

~~~ .php
#
~~~

~~~ .php
0
~~~