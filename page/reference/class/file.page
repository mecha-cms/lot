---
title: Class `File`
description: Working with files and folders.
...

### Configuration

~~~ .php
File::$config = [
    // `$min` is for the minimum file size allowed in byte(s)
    // `$max` is for the maximum file size allowed in byte(s)
    'sizes' => [$min, $max],
    // list of allowed file extension(s)
    'extensions' = ['log', 'txt']
];
~~~

### Exist

~~~ .xmp.php
File::exist($input, $fail = false);
~~~

Check the existence of a file/folder:

~~~ .php
if (File::exist('test.txt')) {
    echo 'File `test.txt` is exists.';
}
~~~

Return the given path if file/folder is exists, return `false` if not:

~~~ .php
if ($file = File::exist('header.php')) {
    include $file;
} else {
    include 'header.legacy.php';
}
~~~

Shortcut:

~~~ .php
include File::exist('header.php', 'header.legacy.php');
~~~

Loop through list of file path until it finds a file that is exists:

~~~ .php
if ($test = File::exist(['page-post-2016.php', 'page-post.php', 'page.php'], false)) {
    echo $test . ' does exist.';
} else {
    echo $test . ' is now `false`.';
}
~~~

### Inspect

~~~ .xmp.php
File::inspect($input, $key = null, $fail = false);
~~~

Inspect file details:

~~~ .php
$test_1 = File::inspect('.\path\to\file.txt');
$test_2 = File::inspect('.\path\to\file.txt', 'url');
$test_3 = File::inspect('.\path\to\file.txt', 'wow');
~~~

Result:

~~~ .php
$test_1 = [
    'path' => '.\path\to\file.txt',
    'name' => 'file',
    'url' => 'http://localhost/path/to/file.txt',
    'extension' => 'txt',
    'update' => '2014-06-21 20:05:17',
    'size' => '20.62 KB',
    'is' => [
        'hidden' => false,
        'file' => true,
        'folder' => false
    ],
    '__update' => 1403355917,
    '__size' => 21114
];
~~~

~~~ .php
$test_2 = 'http://localhost/path/to/file.txt';
~~~

~~~ .php
$test_3 = false;
~~~

### Explore

~~~ .xmp.php
File::explore($folder = ROOT, $deep = false, $flat = false, $fail = false);
~~~

Options:

Parameter | Description
--------- | -----------
`$folder` | The folder path to explore.
`$deep` | Explore the folder contents recursively.
`$flat` | Data output as flat array instead of nested array.

List all files from a folder:

~~~ .php
$tree_1 = File::explore('path\to\folder');
$tree_2 = File::explore('path\to\folder', true);
$tree_3 = File::explore('path\to\folder', true, true);
~~~

Result:

~~~ .no-highlight
$tree_1
 │
 ├── path\to\folder\file-1.txt: 1
 ├── path\to\folder\file-2.txt: 1
 ├── path\to\folder\folder-1: 0
 ├── path\to\folder\folder-2: 0
 └── path\to\folder\folder-3: 0
~~~

~~~ .no-highlight
$tree_2
 │
 ├── path\to\folder\file-1.txt: 1
 ├── path\to\folder\file-2.txt: 1
 ├── path\to\folder\folder-1:
 │   ├── path\to\folder\folder-1\file-1.txt: 1
 │   ├── path\to\folder\folder-1\file-2.txt: 1
 │   └── path\to\folder\folder-1\file-3.txt: 1
 ├── path\to\folder\folder-2:
 │   └── path\to\folder\folder-2\file-1.txt: 1
 └── path\to\folder\folder-3:
     ├── path\to\folder\folder-3\file-1.txt: 1
     ├── path\to\folder\folder-3\file-3.txt: 1
     └── path\to\folder\folder-3\folder-1:
         ├── path\to\folder\folder-3\folder-1\file-1.txt: 1
         ├── path\to\folder\folder-3\folder-1\file-2.txt: 1
         └── path\to\folder\folder-3\folder-1\file-3.txt: 1
~~~

~~~ .no-highlight
$tree_3
 │
 ├── path\to\folder\file-1.txt: 1
 ├── path\to\folder\file-2.txt: 1
 ├── path\to\folder\folder-1: 0
 ├── path\to\folder\folder-1\file-1.txt: 1
 ├── path\to\folder\folder-1\file-2.txt: 1
 ├── path\to\folder\folder-1\file-3.txt: 1
 ├── path\to\folder\folder-2: 0
 ├── path\to\folder\folder-2\file-1.txt: 1
 ├── path\to\folder\folder-3: 0
 ├── path\to\folder\folder-3\file-1.txt: 1
 ├── path\to\folder\folder-3\file-3.txt: 1
 ├── path\to\folder\folder-3\folder-1: 0
 ├── path\to\folder\folder-3\folder-1\file-1.txt: 1
 ├── path\to\folder\folder-3\folder-1\file-2.txt: 1
 └── path\to\folder\folder-3\folder-1\file-3.txt: 1
~~~

### Write

Create a file:

~~~ .php
File::write('some text')->saveTo('path\to\file.txt');
~~~

### Save

Update a file:

~~~ .php
File::open('path\to\file.txt')->write('some text')->save();
~~~

### Append

Append text to file:

~~~ .php
File::open('path\to\file.txt')->append('hey!')->save();
~~~

### Prepend

Prepend text to file:

~~~ .php
File::open('path\to\file.txt')->prepend('hey!')->save();
~~~

### Read

Output the file content:

~~~ .php
echo File::open('path\to\file.txt')->read();
~~~

### Get

Reading file line by line. An alternative to the previous method which allows you to stop the reading process on a specific line/condition:

~~~ .php
// stop reading at line 4
echo File::open('path\to\file.txt')->get(3);
~~~

~~~ .php
// stop reading at a line that contains `$`
echo File::open('path\to\file.txt')->get('$');
~~~

~~~ .php
// stop reading at a line that contains `$` exactly at position `12`
echo File::open('path\to\file.txt')->get(['$', 12]);
~~~

### Import

Import a PHP file:

~~~ .php
$test = File::open('path\to\file.php')->import();
~~~

### Export

Export data as a PHP file:

~~~ .php
$test = File::export([
    'foo' => 'bar',
    'baz' => 'qux'
])->saveTo('path\to\file.php');
~~~

### Serialize

This is just a shortcut for `File::write(serialize('test!'))->saveTo('path\to\file.txt')`

~~~ .php
File::serialize('test!')->saveTo('path\to\file.txt');
~~~

### Unerialize

This is just a shortcut for `unserialize(File::open('file.txt')->read())`

~~~ .php
File::open('file.txt')->unserialize();
~~~

### Move To

Move a file or folder:

~~~ .php
File::open('path\to\file.txt')->moveTo('path\to\folder');
~~~

~~~ .php
File::open('path\to\folder')->moveTo('path\to\another-folder');
~~~

Move a file or folder, then rename it:

~~~ .php
File::open('path\to\file.txt')->moveTo('path\to\folder\file-1.txt');
~~~

### Rename To

Rename a file:

~~~ .php
File::open('path\to\file.txt')->renameTo('file-1.txt');
~~~

### Copy To

Copy a file:

~~~ .php
File::open('path\to\file.txt')->copyTo('path\to\file-2.txt');
~~~

~~~ .php
File::open('path\to\file.txt')->copyTo('path\to\folder');
~~~

~~~ .php
File::open('path\to\file.txt')->copyTo([
    'path\to\file-1.txt',
    'path\to\file-2.txt',
    'path\to\folder-1',
    'path\to\folder-2',
    …
]);
~~~

Don’t be affraid to write the same file name multiple times:

~~~ .php
File::open('path\to\file.txt')->copyTo([
    'path\to\file-copy.txt',
    'path\to\file-copy.txt',
    'path\to\file-copy.txt',
    'path\to\file-copy.txt',
    'path\to\file-copy.txt',
    …
]);
~~~

### Delete

Delete a file or folder:

~~~ .php
File::open('path\to\file.txt')->delete();
~~~

~~~ .php
File::open('path\to\folder')->delete();
~~~

### T

Get file modification time:

~~~ .php
echo File::T('path\to\file.txt');
~~~

### Consent

Set file permission:

~~~ .php
File::open('path\to\file.txt')->consent(0600);
~~~

Shortcut to set file permission during saving:

~~~ .php
File::write('test!')->saveTo('path\to\file.txt', 0600);
~~~

~~~ .php
File::open('path\to\file.txt')->write('test!')->save(0600);
~~~

### Upload

Upload a file:

~~~ .php
File::upload($_FILES['file'], 'path\to\folder');
~~~

Custom callback function:

~~~ .php
File::upload($_FILES['file'], 'path\to\folder', function($file) {
    // do something …
});
~~~

### Size

Convert file size.

**Options:** `B`, `KB`, `MB`, `GB`, `TB`

~~~ .php
echo File::size('path\to\file.txt'); // automatic (as short as possible)
~~~

~~~ .php
echo File::size('path\to\file.txt', 'KB'); // force to `KB`
~~~

~~~ .php
echo File::size(1000000, 'KB'); // as number(s) …
~~~