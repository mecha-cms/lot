---
title: Class `Route`
description: Do something if URL path matched with pattern.
...

### Patterns

Pattern | Description
------- | -----------
`%s%` | Matched with any but `/`
`%i%` | Matched with any numbers.
`%f%` | Matched with any numbers and floats.
`%*%` | Matched with any and `/`
`%[foo,bar,baz\,qux]%` | Matched with `foo`, `bar` and `baz,qux`
`%[foo,bar,%i%]%` | Matched with `foo`, `bar` and any numbers.

### Set

~~~ .xmp.php
Route::set($id = null, $fn = null, $stack = null, $pattern = false);
~~~

Set a new route:

~~~ .php
Route::set('blog/%i%', function($step = 1) {
    // here, `$step` will return `4` if we are in `http://localhost/blog/4`
    // and will return `1` if we are in `http://localhost/blog`
});
~~~

> **Note:** Default `$stack` value is `10`.

Set multiple routes:

~~~ .php
Route::set(['blog/%s%/%i%', 'blog/%s%', 'blog/%i%', 'blog'], function($slug = "", $step = 1) { … });
~~~

The code above is equal to these:

~~~ .php
Route::set('blog/%s%/%i%', function($slug = "", $step = 1) { … }, 10);
Route::set('blog/%s%', function($slug = "", $step = 1) { … }, 10.1);
Route::set('blog/%i%', function($slug = "", $step = 1) { … }, 10.2);
Route::set('blog', function($slug = "", $step = 1) { … }, 10.3);
~~~

### Reset

~~~ .xmp.php
Route::reset($id);
~~~

Remove a route:

~~~ .php
Route::reset('blog/%s%');
~~~

Remove routes:

~~~ .php
Route::reset(['blog/%s%/%i%', 'blog/%s%']);
~~~

### Get

~~~ .xmp.php
Route::get($id = null, $fail = false);
~~~

Check whether `blog/%s%` route is exists:

~~~ .php
if (Route::get('blog/%s%')) { … }
~~~

This method will return the route data that has been set by `Route::set()`; or `false`:

~~~ .php
__test__(
    Route::get('blog/%s%'),
    Route::get('blog/$'),
    Route::get('blog/$', 0)
);
~~~

Result:

~~~ .php
[
    'fn' => function($slug = "", $step = 1) { … },
    'stack' => 10,
    'is' => ['pattern' => false]
]
~~~

~~~ .php
false
~~~

~~~ .php
0
~~~

### Pattern

~~~ .xmp.php
Route::pattern($pattern, $fn = false, $stack = null);
~~~

Set a new route or routes using plain regular expression pattern:

~~~ .php
Route::pattern('#^blog\/([^\/]+)?\/(\d+)?$#', function($slug = "", $step = 1) { … });
~~~

### Is

~~~ .xmp.php
Route::is($id, $fail = false, $pattern = false);
~~~

Detect whether current URL path is matched with the route pattern:

~~~ .php
if (Route::is('blog/%s%')) { … }
~~~

This method will return the route data, parsed from the current URL path; or `false`:

~~~ .php
__test__(
    Route::is('blog/%s%/%i%'),
    Route::is('blog/$'),
    Route::is('blog/$', 0)
);
~~~

Result:

~~~ .php
[
    'pattern' => 'blog/%s%/%i%',
    'path' => 'blog/archive/4',
    'lot' => ['archive', 4]
]
~~~

~~~ .php
false
~~~

~~~ .php
0
~~~

### Fire

~~~ .xmp.php
Route::fire($id = null, $lot = []);
~~~

Execute the added routes:

~~~ .php
Route::fire();
~~~

Execute specific route with pre–defined value:

~~~ .php
Route::fire('blog/%s%/%i%', ['archive', 4]);
~~~

### Hook

~~~ .xmp.php
Route::hook($id, $fn = null, $stack = null, $pattern = false);
~~~

Set custom actions before `blog/%s%` route execution:

~~~ .php
function my_route_hook_fn($slug = "") {
    $_POST['foo'] = 'bar';
}

Route::hook('blog/%s%', 'my_hook_fn');
~~~

> **Note:** Default `$stack` value is `10`.

### Hooked

~~~ .xmp.php
Route::hooked($id = null, $stack = null | $fn = null, $fail = false);
~~~

Check whether `my_route_hook_fn` already hooked to the `blog/%s%` route:

~~~ .php
if (Route::hooked('blog/%s%', 'my_route_hook_fn')) { … }
~~~