---
title: Function
description: Helper functions.
...

### Test

~~~ .xmp.php
__test__($a[, $b[, $c[, ...]]]);
~~~

Dump a PHP code to show the results:

~~~ .php
__test__($foo, $bar, $baz);
~~~

### Format

~~~ .xmp.php
__format__($s, $x = "\n", $d = '#', $r = true);
~~~

Create regular expression pattern from a string contains some [wildcards](https://en.wikipedia.org/wiki/Wildcard_character "Wildcard Characters – Wikipedia"):

~~~ .php
$pattern = __format__('lorem %s% ipsum %i% dolor # sit amet');
~~~

Parameter | Description
--------- | -----------
`$s` | The string input.
`$x` | Forbidden characters for the `%s%` wildcard.
`$d` | The regular expression delimiter to escape.
`$r` | Can the wildcard be replaced by an empty data?

Pattern | Description
------- | -----------
`%s%` | Accept any string but `$x`.
`%i%` | Accept any string numbers.
`%f%` | Accept any string numbers and floats.
`%b%` | Accept any string booleans.
`%*%` | Accept any string and `$x`.
`%[foo,bar,baz\,qux]%` | Accept `foo`, `bar` and `baz,qux`.
`%[foo,bar,%i%]%` | Accept `foo`, `bar` and any string numbers.

This function will return a regular expression string without the delimiters:

~~~ .php
$pattern = 'lorem ([^\n]+) ipsum (\d+) dolor \# sit amet';
~~~

### Replace

~~~ .xmp.php
__replace__($s, $x = "\n", $r = true);
~~~

TODO

### Is Anemon

~~~ .xmp.php
__is_anemon__($x);
~~~

Return `true` if `$x` is array or object.

### Is Numeric Anemon

~~~ .xmp.php
__is_anemon_0__($x);
~~~

Return `true` if the encoded JSON version of `$x` starts with `[` and ends with `]` (a JavaScript array).

### Is Associative Anemon

~~~ .xmp.php
__is_anemon_a__($x);
~~~

Return `true` if the encoded JSON version of `$x` starts with `{` and ends with `}` (a JavaScript object).

### Is Instance

~~~ .xmp.php
__is_instance__($x);
~~~

Return `true` if `$x` is an instance of _any_ class.

### Is JSON

~~~ .xmp.php
__is_json__($x);
~~~

Return `true` if `$x` is a JSON string.

### Is Serialize

~~~ .xmp.php
__is_serialize__($x);
~~~

Return `true` if `$x` is a serialized string.

### Class to File

~~~ .xmp.php
__c2f__($x, $s = '-');
~~~

Convert class name into file name:

~~~ .php
$test = __c2f__('Foo\Bar\BazQux\Abc\ABC');
~~~

Result:

~~~ .php
$test = 'foo.bar.baz-qux.abc.a-b-c';
~~~

### File to Class

~~~ .xmp.php
__f2c__($x, $s = '-');
~~~

Convert file name into class name:

~~~ .php
$test = __f2c__('foo.bar.baz-qux.abc.a-b-c');
~~~

Result:

~~~ .php
$test = 'Foo\Bar\BazQux\Abc\ABC';
~~~

### URL

~~~ .xmp.php
__url__($key = null, $fail = false);
~~~

Extract current URL data:

~~~ .php
$test_1 = __url__();
$test_2 = __url__('protocol');
$test_3 = __url__('wow');
$test_4 = __url__('wow', 0);
~~~

Result:

~~~ .php
$test_1 = [
    'scheme' => 'http',
    'protocol' => 'http://',
    'host' => 'localhost',
    'port' => 80,
    'user' => null,
    'pass' => null,
    'directory' => 'sub-directory',
    'url' => '[[url.protocol]][[url.host]]/sub-directory',
    'path' => 'foo/bar',
    'query' => '?foo=bar',
    'previous' => null,
    'current' => '[[url.protocol]][[url.host]]/sub-directory/foo/bar',
    'next' => null,
    'hash' => null
];
~~~

~~~ .php
$test_2 = 'http://';
~~~

~~~ .php
$test_3 = false;
~~~

~~~ .php
$test_4 = 0;
~~~

### Others

#### Array {#reference:a}

~~~ .xmp.php
a($o, $safe = true);
~~~

Convert object to array:

~~~ .php
$test = new stdClass;
$test->a = 'b';
$test->c = new Date;
$test->d = (object) [
    'year' => 0,
    'month' => 0,
    'day' => 0
];

$test = a($test);
~~~

Result:

~~~ .php
$test = [
    'a' => 'b',
    'c' => Date::__set_state([
        'date' => '2016-12-25 23:11:16'
    ]),
    'd' => [
        'year' => 0,
        'month' => 0,
        'day' => 0
    ]
];
~~~

> **Note:** Class instance will not be converted into array if `$safe` is set to `true`.

#### `b` {#reference:b}

_Reserved._

#### Camel Case {#reference:c}

~~~ .xmp.php
c($x, $s = "", $X = "");
~~~

Convert text to `camelCase`:

~~~ .php
 
~~~

#### Declare {#reference:d}

~~~ .xmp.php
d($f, $fn = null, $s__ = []);
~~~

Declare classes with callback:

~~~ .php
 
~~~

#### Evaluate {#reference:e}

~~~ .xmp.php
e($s, $x = []);
~~~

Evaluate string data to their appropriate data type:

~~~ .php
$test_1 = e('true');
$test_2 = e([
    'true',
    'false',
    'null',
    '1',
    '1.5',
    '"true"',
    '"false"',
    '"null"',
    '"1"',
    '"1.5"',
    '{"foo":1,"bar":"1"}'
]);
~~~

Result:

~~~ .php
$test_1 = true;

$test_2 = [
    true,
    false,
    null,
    1,
    1.5,
    'true',
    'false',
    'null',
    '1',
    '1.5',
    [
        'foo' => 1,
        'bar' => '1'
    ]
];
~~~

#### Filter {#reference:f}

~~~ .xmp.php
f($x, $s = '-', $l = false, $X = 'a-zA-Z\d', $f = 1);
~~~

Filter/sanitize string:

~~~ .php
 
~~~

#### Glob {#reference:g}

~~~ .xmp.php
g($s = ROOT, $x = '*', $q = "", $o = false, $h = true);
~~~

Advance PHP `glob` function:

~~~ .php
 
~~~

#### Hyphenate {#reference:h}

~~~ .xmp.php
h($x, $s = '-', $X = "");
~~~

Convert text to `slug-case` with `-` (hyphen) as the default separator:

~~~ .php
 
~~~

#### Include {#reference:i}

~~~ .xmp.php
i($a, $b = [], $fn = [null, null], $s__ = []);
~~~

Include files with callback:

~~~ .php
 
~~~

#### `j` {#reference:j}

_Reserved._

#### `k` {#reference:k}

_Reserved._

#### Lower Case {#reference:l}

~~~ .php.xmp
l($x);
~~~

Convert string into `lower case`:

~~~ .php
$test = l('POKÉMON');
~~~

Result:

~~~ .php
$test = 'pokémon';
~~~

#### `m` {#reference:m}

_Reserved._

#### Normalize {#reference:n}

~~~ .xmp.php
n($x, $t = '    ');
~~~

Convert `\r\n` and `\r` to `\n` and `\t` to 4 spaces:

~~~ .php
 
~~~

#### Object {#reference:o}

~~~ .xmp.php
o($a, $safe = true);
~~~

Convert array to object:

~~~ .php
$test = o([
    'a' => 'b',
    'c' => 'd',
    'e' => ['f', 'g', 'h', 'i'],
    'j' => [
        0 => 'k',
        1 => 'l',
        '2' => 'm'
    ],
    'n' => [
        0 => 'o',
        1 => 'p',
        'q' => 'r'
    ]
]);
~~~

Result:

~~~ .php
$test = stdClass::__set_state([
    'a' => 'b',
    'c' => 'd',
    'e' => ['f', 'g', 'h', 'i'],
    'j' => ['k', 'l', 'm'],
    'n' => stdClass::__set_state([
        0 => 'o',
        1 => 'p',
        'q' => 'r'
    ])
]);
~~~

> **Note:** Array with numeric keys will not be converted into object if `$safe` is set to `true`.

#### Pascal Case {#reference:p}

~~~ .xmp.php
p($x, $s = "", $X = "");
~~~

Convert text to `PascalCase`:

~~~ .php
 
~~~

#### Quantity {#reference:q}

~~~ .xmp.php
q($x, $deep = false);
~~~

Quantity counter (length of string, number or [anemon][link:class/anemon]):

~~~ .php
 
~~~

#### Require {#reference:r}

~~~ .xmp.php
r($a, $b = [], $fn = [null, null], $s__ = []);
~~~

Require files with callback:

~~~ .php
 
~~~

#### String {#reference:s}

~~~ .xmp.php
s($x);
~~~

Convert data type to their string format (this is the inverse version of [`e`][link:#reference:e]):

~~~ .php
 
~~~

#### Trim {#reference:t}

~~~ .xmp.php
t($x, $o = '"', $c = null);
~~~

Trim string from `??` and `!!` once:

~~~ .php
$test = t('????abc!!!!', '??', '!!');
~~~

Result:

~~~ .php
$test = '??abc!!';
~~~

#### Upper Case {#reference:u}

~~~ .xmp.php
u($x);
~~~

Convert text to `UPPER CASE`:

~~~ .php
$test = u('pokémon');
~~~

Result:

~~~ .php
$test = 'POKÉMON';
~~~

#### Unescape {#reference:v}

~~~ .xmp.php
v($x);
~~~

Unescape characters (this is the inverse version of [`x`][link:#reference:x]):

~~~ .php
 
~~~

#### Word {#reference:w}

~~~ .xmp.php
w($x, $c = [], $n = false);
~~~

Convert any data to plain words:

~~~ .php
 
~~~

#### Escape {#reference:x}

~~~ .xmp.php
x($x, $c = "'", $d = '-+*/=:()[]{}<>^$.?!|\\');
~~~

Escape characters:

~~~ .php
 
~~~

#### Yield {#reference:y}

~~~ .xmp.php
y($x, $a = []);
~~~

Output/yield an echo-based function as normal return-based function:

~~~ .php
 
~~~

#### Zip {#reference:z}

~~~ .xmp.php
z($a, $b = true, $safe = true);
~~~

Export array/object into a compact PHP file:

~~~ .php
 
~~~