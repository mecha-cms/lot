---
title: Fields
description: Field API.
...

Syntax:

~~~ .php.xmp
Config::set('panel.f.{$tab}', [ … ]);
~~~

~~~ .php.xmp
[
    'title' => [
        'type' => 'text',
        'value' => 'Title Field',
        …
    ],
    'url' => [
        'type' => 'url',
        'value' => '%{url}%',
        …
    ],
    …
]
~~~

**Example:**

~~~ .php
Config::set('panel.f.page', [
    'f_name' => [
        'type' => 'text',
        'value' => 'Title Field',
        'stack' => 10
    ]
]);
~~~

---

### Title

Determine the field’s title:

~~~ .php
[
    'title' => 'Content'
]
~~~

> **Note:** If `title` property is not set, the parser will try to find a language property that has the same key name as the field’s `name` property, otherwise, it will return the field’s `name`.

### Description

Determine the field’s description or hint:

~~~ .php
[
    'description' => 'e.g. @user'
]
~~~

### Key

Determine custom key to be used for HTML class/ID prefix if the `name` data is written in a complicated form like: `page[date][unix]`

~~~ .php
'page[date][unix]' => [
    'key' => 'page'
]
~~~

Result:

~~~ .html
<p class="f f-page type:textarea">
  <label for="f-page">Page</label>
  <span>
    <textarea name="page[date][unix]" class="textarea" id="f-page"></textarea>
  </span>
</p>
~~~

### Type

Determine the field type (default is `textarea`):

 - `button`
 - `button[]`
 - `color`
 - `content`
 - `date`
 - `editor`
 - `email`
 - `file`
 - `hidden`
 - `number`
 - `pass(?:word)?`
 - `query`
 - `range`
 - `reset`
 - `reset[]`
 - `search`
 - `select`
 - `select[]`
 - `submit`
 - `submit[]`
 - `tel`
 - `text`
 - `textarea`
 - `toggle`
 - `toggle[]`
 - `url`

#### Button

~~~ .php
'foo' => [
    'type' => 'button',
    'value' => 1,
    'title' => 'Action',
    'text' => 'Save'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:button">
  <label for="f-foo">Action</label>
  <span>
    <button name="foo" value="1" type="button" class="button" id="f-foo">Save</button>
  </span>
</p>
~~~

#### Color

~~~ .php
'foo' => [
    'type' => 'color',
    'value' => '#bada55',
    'title' => 'Color'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:color">
  <label for="f-foo">Color</label>
  <span>
    <input name="foo" value="#bada55" type="color" class="input" id="f-foo">
  </span>
</p>
~~~

#### Content

~~~ .php
'foo' => [
    'type' => 'content',
    'value' => '<p>Lorem ipsum dolor sit amet.</p>',
    'title' => 'Description'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:content">
  <label for="f-foo">Description</label>
  <span>
    <p>Lorem ipsum dolor sit amet.</p>
  </span>
</p>
~~~

#### Date

~~~ .php
'foo' => [
    'type' => 'date',
    'value' => '[[e]]echo $date->format('Y/m/d H:i:s');[[/e]]',
    'title' => 'Date'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:date">
  <label for="f-foo">Date</label>
  <span>
    <input name="foo" value="[[e]]echo $date->format('Y/m/d H:i:s');[[/e]]" type="text" class="input date" id="f-date">
  </span>
</p>
~~~

#### Editor

#### Email

~~~ .php
'foo' => [
    'type' => 'email',
    'title' => 'Email'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:email">
  <label for="f-foo">Email</label>
  <span>
    <input name="foo" type="email" class="input" id="f-foo">
  </span>
</p>
~~~

#### File

#### Hidden

#### Number

~~~ .php
'foo' => [
    'type' => 'number',
    'title' => 'Chunk'
]
~~~

Result:

~~~ .html
<p class="f f-foo type:number">
  <label for="f-foo">Chunk</label>
  <span>
    <input name="foo" type="number" class="input" id="f-foo">
  </span>
</p>
~~~

#### Pass

#### Query

#### Range

#### Reset

#### Search

#### Select

#### Submit

#### Tel

#### Text

#### Text Area

#### Toggle

#### URL

### Value

Determine the field’s value:

~~~ .php
[
    'value' => '4'
]
~~~

### Values

Determine the field’s values (result depends on field type):

For field type `select`, `values` property will be used as the option list:

~~~ .php
[
    'type' => 'select',
    'value' => 'red', // selected value
    'values' => [ // option(s)
        'red' => 'Red',
        'green' => 'Green',
        'blue' => 'Blue'
    ]
]
~~~

For field type `toggle[]`, `values` property will be used as the option list:

~~~ .php
[
    'type' => 'toggle[]',
    'value' => 'red', // selected value
    'values' => [ // option(s)
        'red' => 'Red',
        'green' => 'Green',
        'blue' => 'Blue'
    ]
]
~~~

For field type `button[]`, `reset[]` and `submit[]`, `values` property will be used as the button list; `value` property is not required for this field type:

~~~ .php
[
    'type' => 'submit[]',
    'values' => [ // button(s)
        'red' => 'Red',
        'green' => 'Green',
        'blue' => 'Blue'
    ]
]
~~~

### Order

Custom order for the `values` data of field type `(?:button|reset|submit)\[\]`:

~~~ .php
[
    'type' => 'submit[]',
    'values' => [
        'red' => 'Red',
        'green' => 'Green',
        'blue' => 'Blue'
    ],
    'order' => ['blue', 'red', 'green']
]
~~~

### Placeholder

Determine the field placeholder:

~~~ .php
[
    'placeholder' => 'Content goes here…'
]
~~~

### Pattern

Determine the field pattern:

~~~ .php
[
    'pattern' => '^[a-z\\d]+$',
    'description' => 'Letters and numbers only.'
]
~~~

### Range

Determine the minimum and maximum range for field type `range`:

~~~ .php
[
    'type' => 'range',
    'value' => 4,
    'range' => [0, 10]
]
~~~

### Step

Determine the `step` property for field type `range`:

~~~ .php
[
    'type' => 'range',
    'value' => 4,
    'range' => [0, 10],
    'step' => 2
]
~~~

### Union

Arguments for [`Union::__construct()`][link:../../reference/class/union#reference:constructor].

~~~ .php
'description' => [
    'type' => 'textarea',
    'union' => ['div']
]
~~~

Result:

~~~ .html
<div class="f f-description p">
  …
</div>
~~~

### Hidden

Boolean to indicate that the field should be hidden:

~~~ .php
[
    'hidden' => $site->type === '404'
]
~~~

### Width

Determine if the field element should be expanded 100% wide of the current grid:

~~~ .php
'description' => [
    'type' => 'text',
    'width' => true
]
~~~

Result:

~~~ .html
<p class="f f-description">
  <label for="f-description">Description</label>
  <span>
    <inpuy name="description" type="text" class="input width">
  </span>
</p>
~~~

You can use integer and string type as the value to set inline CSS `width` value:

~~~ .php
'description' => [
    'type' => 'text',
    'width' => '4em'
]
~~~

Result:

~~~ .html
<p class="f f-description">
  <label for="f-description">Description</label>
  <span>
    <inpuy name="description" type="text" class="input width" style="width: 4em;">
  </span>
</p>
~~~

### Height

Will expand the `<textarea>` element vertically for field type `textarea` or `editor`:

~~~ .php
'description' => [
    'type' => 'textarea',
    'height' => true
]
~~~

Result:

~~~ .html
<p class="f f-description">
  <label for="f-description">Description</label>
  <span>
    <textarea name="description" class="textarea width height"></textarea>
  </span>
</p>
~~~

You can use integer and string type as the value to set inline CSS `height` value:

~~~ .php
'description' => [
    'type' => 'textarea',
    'height' => '4em'
]
~~~

Result:

~~~ .html
<p class="f f-description">
  <label for="f-description">Description</label>
  <span>
    <textarea name="description" class="textarea width height" style="height: 4em;"></textarea>
  </span>
</p>
~~~

### Attributes

Extra HTML attributes for the field markup:

~~~ .php
[
    'attributes' => [
        'rel' => 'nofollow',
        'target' => '_blank',
        'data' => [
            'user' => '@user'
        ],
        'css' => [
            'color' => '#f00',
            'border' => '1px solid #000'
        ]
    ]
]
~~~

### Expand

Will hide the field label and expand the field element to be 100% wide of the current parent:

~~~ .php
'description' => [
    'expand' => true
]
~~~

Result:

~~~ .html
<p class="f f-description expand">
  <label for="f-description">Description</label>
  <span>
    <textarea name="description" class="textarea block"></textarea>
  </span>
</p>
~~~

### Stack

Field order in the set. This is required. If not set or has value other than numbers, the field will not be generated:

~~~ .php
[
    'a' => [
        'title' => 'Field A',
        'stack' => 3
    ],
    'b' => [
        'title' => 'Field B',
        'stack' => 1
    ],
    'c' => [
        'title' => 'Field C',
        'stack' => 2
    ]
]
~~~