---
title: Image
description: Image manipulation using [GD](http://www.php.net/manual/en/book.image.php "PHP – Image Processing and GD") library.
...

### Original

The original image:

![1](%{asset}%/jpg/reference/extension/image/1.jpg)

### Resize

~~~ .php.xmp
->resize($max_width = 100, $max_height = null, $proportional = true, $crop = false);
~~~

#### Proportional

~~~ .php
Image::take('photo.jpg')->resize(200, 200)->saveAs('photo-2.jpg');
~~~

Result:

![2](%{asset}%/jpg/reference/extension/image/2.jpg)

#### Stretch

~~~ .php
Image::take('photo.jpg')->resize(200, 200, false)->saveAs('photo-2.jpg');
~~~

Result:

![3](%{asset}%/jpg/reference/extension/image/3.jpg)

### Crop

~~~ .php.xmp
->crop($x = 72, $y = null, $width = null, $height = null);
~~~

#### Crop and Resize

Simultaneously crop and resize image to obtain the ideal cropping result:

~~~ .php
Image::take('photo.jpg')->crop(72, 72)->saveAs('photo-2.jpg');
~~~

Result:

![4](%{asset}%/jpg/reference/extension/image/4.jpg)

#### Crop

Cropping without resizing image. You need to provide X and Y coordinates before width and height:

~~~ .php
/**
 * x: 130
 * y: 50
 * width: 100
 * height: 100
 */

Image::take('photo.jpg')->crop(130, 50, 100, 100)->saveAs('photo-2.jpg');
~~~

Result:

![5](%{asset}%/jpg/reference/extension/image/5.jpg)

### Color

#### Brightness

~~~ .php.xmp
->brightness($level = 1);
~~~

~~~ .php
Image::take('photo.jpg')->brightness(50)->saveAs('photo-2.jpg');
~~~

Result:

![6](%{asset}%/jpg/reference/extension/image/6.jpg)

#### Contrast

~~~ .php.xmp
->contrast($level = 1);
~~~

~~~ .php
Image::take('photo.jpg')->contrast(40)->saveAs('photo-2.jpg');
~~~

Result:

![7](%{asset}%/jpg/reference/extension/image/7.jpg)

#### Colorize

~~~ .php.xmp
->colorize($r, $g, $b, $a);
~~~

~~~ .php.xmp
->colorize([$r, $g, $b, $a]);
~~~

~~~ .php.xmp
->colorize($rgba);
~~~

~~~ .php.xmp
->colorize($hex, $a);
~~~

Manipulate the color hue of image using RGBA or HEX color code:

~~~ .php
Image::take('photo.jpg')->colorize(255, 10, 20, .4)->saveAs('photo-2.jpg');
~~~

~~~ .php
Image::take('photo.jpg')->colorize([255, 10, 20, .4])->saveAs('photo-2.jpg');
~~~

~~~ .php
Image::take('photo.jpg')->colorize('rgba(255, 10, 20, .4)')->saveAs('photo-2.jpg');
~~~

~~~ .php
Image::take('photo.jpg')->colorize('#FF0A14', .4)->saveAs('photo-2.jpg');
~~~

Result:

![8](%{asset}%/jpg/reference/extension/image/8.jpg)

#### Grayscale

~~~ .php.xmp
->grayscale();
~~~

~~~ .php
Image::take('photo.jpg')->grayscale()->saveAs('photo-2.jpg');
~~~

Result:

![9](%{asset}%/jpg/reference/extension/image/9.jpg)

#### Negate

~~~ .php.xmp
->negate();
~~~

~~~ .php
Image::take('photo.jpg')->negate()->saveAs('photo-2.jpg');
~~~

Result:

![10](%{asset}%/jpg/reference/extension/image/10.jpg)

#### Emboss

~~~ .php.xmp
->emboss($level = 1);
~~~

~~~ .php
Image::take('photo.jpg')->emboss(1)->saveAs('photo-2.jpg');
~~~

Result:

![11](%{asset}%/jpg/reference/extension/image/11.jpg)

### Effect

#### Blur

~~~ .php.xmp
->blur($level = 1);
~~~

~~~ .php
Image::take('photo.jpg')->blur(4)->saveAs('photo-2.jpg');
~~~

Result:

![12](%{asset}%/jpg/reference/extension/image/12.jpg)

#### Sharpen

~~~ .php.xmp
->sharpen($level = 1);
~~~

~~~ .php
Image::take('photo.jpg')->sharpen(1)->saveAs('photo-2.jpg');
~~~

Result:

![13](%{asset}%/jpg/reference/extension/image/13.jpg)

#### Pixelate

~~~ .php.xmp
->pixelate($level = 1, $advance = false);
~~~

~~~ .php
Image::take('photo.jpg')->pixelate(2)->saveAs('photo-2.jpg');
~~~

Result:

![14](%{asset}%/jpg/reference/extension/image/14.jpg)

~~~ .php
Image::take('photo.jpg')->pixelate(2, true)->saveAs('photo-2.jpg');
~~~

Result:

![15](%{asset}%/jpg/reference/extension/image/15.jpg)

### Flip and Rotate

#### Flip

~~~ .php.xmp
->flip($direction = 'horizontal');
~~~

~~~ .php
Image::take('photo.jpg')->flip('horizontal')->saveAs('photo-2.jpg');
~~~

~~~ .php
Image::take('photo.jpg')->flip('vertical')->saveAs('photo-2.jpg');
~~~

~~~ .php
Image::take('photo.jpg')->flip('both')->saveAs('photo-2.jpg');
~~~

Result for `horizontal`:

![16](%{asset}%/jpg/reference/extension/image/16.jpg)

#### Rotate

~~~ .php.xmp
->rotate($angle = 0, $bg = false);
~~~

~~~ .php.xmp
->rotate($angle = 0, [$r, $g, $b, $a]);
~~~

~~~ .php.xmp
->rotate($angle = 0, $rgba);
~~~

~~~ .php.xmp
->rotate($angle = 0, $hex, $a);
~~~

~~~ .php
Image::take('photo.jpg')->rotate(90)->saveAs('photo-2.jpg');
~~~

Result:

![17](%{asset}%/jpg/reference/extension/image/17.jpg)

Fill image holes with a solid background color (or transparent and semi-transparent background color for non JPG/JPEG images):

~~~ .php
Image::take('photo.png')->rotate(45, [53, 92, 152, 1])->saveAs('photo-2.png');
~~~

~~~ .php
Image::take('photo.png')->rotate(45, 'rgba(53, 92, 152, .5)')->saveAs('photo-2.png');
~~~

~~~ .php
Image::take('photo.png')->rotate(45, '#355C98', .5)->saveAs('photo-2.png');
~~~

### Merge

~~~ .php.xmp
->merge($gap = 0, $direction = 'vertical', $bg = false);
~~~

~~~ .php.xmp
->merge($gap = 0, $direction = 'vertical', [$r, $g, $b, $a]);
~~~

~~~ .php.xmp
->merge($gap = 0, $direction = 'vertical', $rgba);
~~~

~~~ .php.xmp
->merge($gap = 0, $direction = 'vertical', $hex, $a);
~~~

Combine images into an image:

~~~ .php
Image::take([
    'icon-1.png',
    'icon-2.png',
    'icon-3.png',
    'icon-4.png',
    'icon-5.png'
])->merge()->saveAs('sprites.png');
~~~

Result:

![18](%{asset}%/png/reference/extension/image/18.png)

Add distance between images:

~~~ .php
Image::take([
    'icon-1.png',
    'icon-2.png',
    'icon-3.png',
    'icon-4.png',
    'icon-5.png'
])->merge(10)->saveAs('sprites.png');
~~~

Result:

![19](%{asset}%/png/reference/extension/image/19.png)

Horizontal image sprites:

~~~ .php
Image::take([
    'icon-1.png',
    'icon-2.png',
    'icon-3.png',
    'icon-4.png',
    'icon-5.png'
])->merge(10, 'horizontal')->saveAs('sprites.png');
~~~

Result:

![20](%{asset}%/png/reference/extension/image/20.png)

Fill the gap between images with background color:

~~~ .php
Image::take([ … ])->merge(10, 'vertical', [53, 92, 152, 1])->saveAs('sprites.png');
~~~

~~~ .php
Image::take([ … ])->merge(10, 'vertical', 'rgba(53, 92, 152, .5)')->saveAs('sprites.png');
~~~

~~~ .php
Image::take([ … ])->merge(10, 'vertical', '#355C98', .5)->saveAs('sprites.png');
~~~

### File

#### Inspect

~~~ .php.xmp
Image::inspect($file, $key = null, $fail = false);
~~~

Get image info from a file.

~~~ .php
$test = Image::inspect('photo.jpg');
~~~

Result:

~~~ .txt
$test
├── … ← from `File::inspect()`
├── width: 320
├── height: 240
├── bit: 8
└── mime: image/jpeg
~~~

Optionally to output only single part of the generated data:

~~~ .php
echo Image::inspect('photo.jpg', 'mime', 'default value');
~~~

~~~ .php
echo Image::inspect('photo.jpg')['mime'];
~~~

#### Save

~~~ .php.xmp
->saveAs($name = 'image-%{id}%.png');
~~~

Change image format. Currently supports for GIF, JPG, JPEG and PNG image extension:

~~~ .php
Image::take('photo.png')->saveAs('photo.jpg');
~~~

Save image to another place:

~~~ .php
Image::take('photo.png')->saveTo('path/to/photo-2.jpg');
~~~

~~~ .php
Image::take('photo.png')->saveTo('path/to/directory');
~~~

#### Draw

~~~ .php.xmp
->draw($save = false);
~~~

Output the manipulated image into browser.

What I mean as “output” here is not the same as outputting an image with the [`HTML::img()`][link:../class/h-t-m-l] method. Here, images will be outputted as the image itself and not as the part of the HTML markup. For example, if you have a PHP file named as `image.php` with contents like this:

~~~ .php
<?php Image::take('photo.jpg')->resize(200, 200)->draw(); ?>
~~~

Then you will be able to use that PHP file in the HTML image like this:

~~~ .html
<img alt="test" src="image.php">
~~~

The code below can give you more ideas:

~~~ .php
$w = HTTP::get('width');
$h = HTTP::get('height');
Image::take('photo.jpg')->resize($w, $h)->draw();
~~~

~~~ .html
<img alt="test" src="image.php?width=200&amp;height=200">
~~~

You could also output and save the generated image at the same time by defining an image path to it. Useful for generating image cache:

~~~ .php
// Draw and save image output to `path/to/directory` as `saved-image.png`
Image::take('path/to/image.png')->resize(100, 100)->draw('path/to/directory/saved-image.png');
~~~