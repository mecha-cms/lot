---
title: Block
description: Placeholder.
icon: M4,3H5V5H3V4A1,1 0 0,1 4,3M20,3A1,1 0 0,1 21,4V5H19V3H20M15,5V3H17V5H15M11,5V3H13V5H11M7,5V3H9V5H7M21,20A1,1 0 0,1 20,21H19V19H21V20M15,21V19H17V21H15M11,21V19H13V21H11M7,21V19H9V21H7M4,21A1,1 0 0,1 3,20V19H5V21H4M3,15H5V17H3V15M21,15V17H19V15H21M3,11H5V13H3V11M21,11V13H19V11H21M3,7H5V9H3V7M21,7V9H19V7H21Z
...

Block is a kind of placeholder that can be embedded in the page content which normally can be written like HTML code in general, but with custom enclosing characters. Each block pattern can then be converted into something more complex.

By default, a block syntax can be defined as follow. It uses `‌[‌[‌` and `‌]‌]‌` as the enclosing characters:

 - Void blocks → `‌[‌[block]‌]‌` or `‌[‌[‌block‌/‌]‌]‌`
 - Container blocks → `‌[‌[‌block‌]‌]content[‌[‌/‌block‌]‌]`

Block attribute syntax is the same as the attribute syntax in HTML.

Blocks are configurable. Even, you can specify your own block markup by editing the configuration file. From the position of this file, go to `lot\state\config.php` then look for the `union` part that looks like this:

~~~ .php
1 => [
    0 => ['[‌[‌', '‌]‌]', '‌/‌'],
    1 => ['=', '"', '"', ' '],
    2 => ['[‌[‌!', '!‌]‌]'],
    3 => ['`[‌[‌', '‌]‌]`']
]
~~~

 - The `0` parts are configuration for the block tag.
 - The `1` parts are configuration for the block tag’s attribute.
 - The `2` parts are for the block comment markup.
 - The `3` parts are for the escape marker.

Following is an example of configuring block pattern as regular HTML (custom HTML tags):

~~~ .xmp.txt
<‌block‌>content<‌/‌block‌>
~~~

~~~ .php
1 => [
    0 => ['<‌', '‌>', '‌/‌'],
    1 => ['=', '"', '"', ' '],
    2 => ['<‌!--', '--‌>'],
    3 => ['&lt;', '&gt;']
]
~~~

As [WordPress](https://developer.wordpress.org/reference/functions/do_shortcode "do_shortcode() | Function | WordPress Developer Resources") _shortcodes_:

~~~ .xmp.txt
[‌block‌]content[‌/‌block‌]
~~~

~~~ .php
1 => [
    0 => ['[‌', '‌]', '‌/‌'],
    1 => ['=', '"', '"', ' '],
    2 => ['[‌!--', '--‌]'],
    3 => ['[‌[‌', '‌]‌]']
]
~~~

As [Twig](http://twig.sensiolabs.org/doc/tags/embed.html "embed - Documentation - Twig - The flexible, fast, and secure PHP template engine") embed code:

~~~ .xmp.txt
{‌%‌ block ‌%‌}content{‌%‌ endblock ‌%‌}
~~~

~~~ .php
1 => [
    0 => ['{‌%‌ ', ' ‌%‌}', '‌end‌'],
    1 => ['=', '"', '"', ' '],
    2 => ['{‌# ', ' #‌}'],
    3 => ["{‌{‌ '{‌%‌ ' ‌}‌}", "{‌{‌ ' ‌%‌}' ‌}‌}"]
]
~~~

As of Mecha version `1.x.x` _shortcodes_:

~~~ .xmp.txt
{‌{‌block‌}‌}content{‌{‌/‌block‌}‌}
~~~

~~~ .php
1 => [
    0 => ['{‌{‌', '‌}‌}', '‌/‌'],
    1 => ['=', '"', '"', ' '],
    2 => ['{‌{‌!', '!‌}‌}'],
    3 => ['`{‌{‌', '‌}‌}`']
]
~~~

---

### Usage

#### Set

~~~ .xmp.php
Block::set(string $id, callable $fn, float $stack = null);
Block::set(string $id, string $text, float $stack = null);
~~~

Define a new block:

~~~ .php
Block::set('mark', function($content) {
    return str_replace(['[[mark]]', '[[/mark]]'], ['<mark>', '</mark>'], $content);
});
~~~

The code above will change this page content:

~~~ .html
Lorem ipsum [‌[‌mark‌]‌]dolor[‌[‌/‌mark‌]‌] `‌[‌[‌mark‌]‌]‌`sit`‌[‌[‌/‌mark‌]‌]‌` amet.
~~~

… to this:

~~~ .html
Lorem ipsum <‌mark‌>dolor<‌/‌mark‌> [‌[‌mark‌]‌]sit[‌[‌/‌mark‌]‌] amet.
~~~

#### Get

~~~ .xmp.php
Block::get(string $id = null, $fail = false);
~~~

Return the `mark` block data if any, otherwise, return `$fail`:

~~~ .php
if ($fn = Block::get('mark')) {
    // do something with `$fn`…
}
~~~

#### Reset

~~~ .xmp.php
Block::reset(string $id);
~~~

Disable the `mark` block pattern:

~~~ .php
Block::reset('mark');
~~~

#### Replace

~~~ .xmp.php
Block::replace(string $id, callable $fn, string $content);
Block::replace(string $id, string $text, string $content);
~~~

Replace `mark` block in `$content` with advance pattern:

~~~ .php
Block::set('mark', function($content) {
    return Block::replace('mark', function($a, $b) {
        $c = "";
        if (isset($b['color'])) {
            $c = ' style="background:' . $b['color'] . ';"';
        }
        return '<mark' . $c . '>' . $a . '</mark>';
    }, $content);
});
~~~

The code above will change this page content:

~~~ .html
Lorem [‌[‌mark‌]‌]ipsum[‌[‌/‌mark‌]‌] [‌[‌mark color="#f00"‌]‌]dolor[‌[‌/‌mark‌]‌] `‌[‌[‌mark‌]‌]‌`sit`‌[‌[‌/‌mark‌]‌]‌` `‌[‌[‌mark color="#f00"‌]‌]‌`amet`‌[‌[‌/‌mark‌]‌]‌`.
~~~

… to this:

~~~ .html
Lorem <‌mark‌>ipsum<‌/‌mark‌> <‌mark style="background:#f00;"‌>dolor<‌/‌mark‌> [‌[‌mark‌]‌]sit[‌[‌/‌mark‌]‌] [‌[‌mark color="#f00"‌]‌]amet[‌[‌/‌mark‌]‌].
~~~

#### Using Files

Block names can be defined as plain text file with extension `data` stored in `.\lot\block` folder. Each file name acts as the block name, while the code in the file acts as a substitute content for the block.

~~~ .txt
.\
└── lot\
    └── block\
        ├── mark.data
        └── …
~~~

The following is an example of the `mark.data` file content:

~~~ .txt
<mark style="background:%‌{‌color‌}‌%">%‌{‌1‌}‌%</mark>
~~~

The `%‌{‌1‌}‌%` pattern is a parameter that will be converted into text that is inside the container block markup. Some other parameters include:

 - `%‌{‌0‌}‌%` → Return the block name.
 - `%‌{‌1‌}‌%` → Return the block content.
 - `%‌{‌2‌}‌%` → Return the block attributes as literal JSON.
 - `%‌{‌color‌}‌%` → Return the block’s `color` attribute value.